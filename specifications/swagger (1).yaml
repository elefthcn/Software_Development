# Version of swagger: "2.0"
swagger: '2.0'

# info holds metadata of application 
info:
  version: "0.0.1"
  title: Urban Picasso E-shop
  
# RESTful API what produces in the response or consumes in the request
consumes: 
  - application/json
produces:
  - application/json

definitions:
  
  customer:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  
  newCustomer:
    type: object
    required:
      - name
    properties:
      name:
        type: string

  salesman:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  
  newSalesman:
    type: object
    required:
      - name
    properties:
      name:
        type: string

paths:
  /customers:
    get:
      description: Gets customers of online e-shop
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: Customers succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/customer'
    post:
      description: Create a new customer
      operationId: addCustomer
      parameters:
        - name: customer
          in: body
          required: true
          description: Customer to add to the eshop
          schema:
            $ref: '#/definitions/newCustomer'
      responses:
        201:
          description: Customer created  
  
  /customers/{customerID}:
    parameters:
      - name: customerID
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a customer with *customerID*
      responses:
        200:
          description: Customer succesfully retrieved
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found
    delete:
      description: Delete a customer with *customerID*
      responses:
        200:
          description: Customer deleted 
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found
    put:
      description: Update a customer with *customerID*
      operationId: updateCustomer
      parameters:
        - name: customer
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newCustomer'
      responses:
        200:
          description: Customer updated
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found  
  
  /customers/{customerName}:
    parameters:
      - name: customerName
        in: path
        required: true
        type: string
    get:
      description: Get a customer with *customerName*
      responses:
        200:
          description: Customer succesfully retrieved
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found
    delete:
      description: Delete a customer with *customerName*
      responses:
        200:
          description: Customer deleted 
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found
    put:
      description: Update a customer with *customerName*
      operationId: updateCustomer
      parameters:
        - name: customer
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newCustomer'
      responses:
        200:
          description: Customer updated
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found  
  /salesmen:
    get:
      description: Gets salesmen
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: Salesmen succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/salesman'
    post:
      description: Create a new salesman
      operationId: addSalesman
      parameters:
        - name: salesman
          in: body
          required: true
          description: Salesman to add to the eshop
          schema:
            $ref: '#/definitions/newSalesman'
      responses:
        201:
          description: Salesman created    
          
          
          