# Version of swagger: "2.0"
swagger: '2.0'

info:
  description: |
    An API of an e-shop for Paintings, in the swagger-2.0 specification
  version: "0.0.1"
  title: Swagger E-shop Urban Picasso
  contact:
    name: Eletheriou Christina, Petros Tanos
    email: xristinaele@hotmail.com
consumes: 
  - application/json
produces:
  - application/json

definitions:
  
  customer:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  
  newCustomer:
    type: object
    required:
      - name
    properties:
      name:
        type: string

  salesman:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  
  newSalesman:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      paintId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
      complete:
        type: boolean
        
  painting:
    type: object
    properties:
      title:
        type: integer
        format: int64
      paintId:
        type: integer
        format: int64
      price:
        type: integer
        format: int32
      details:
        type: string
        description: Details of the paint
  
  cart:
    type: object
    properties:
      cartId:
        type: integer
        format: int64
  
  review:
    type: object
    properties:
      reviewId:
        type: integer
        format: int64
        
paths:
  /customers:
    get:
      description: Gets customers of online e-shop
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: Customers succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/customer'
    post:
      description: Create a new customer
      operationId: addCustomer
      parameters:
        - name: customer
          in: body
          required: true
          description: Customer to add to the eshop
          schema:
            $ref: '#/definitions/newCustomer'
      responses:
        201:
          description: Customer created  
  
  /customers/{customerID}:
    parameters:
      - name: customerID
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a customer with *customerID*
      responses:
        200:
          description: Customer succesfully retrieved
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found
    delete:
      description: Delete a customer with *customerID*
      responses:
        200:
          description: Customer deleted 
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found
    put:
      description: Update a customer with *customerID*
      operationId: updateCustomer
      parameters:
        - name: customer
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newCustomer'
      responses:
        200:
          description: Customer updated
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found  
  
  /customers/{customerName}:
    parameters:
      - name: customerName
        in: path
        required: true
        type: string
    get:
      description: Get a customer with *customerName*
      responses:
        200:
          description: Customer succesfully retrieved
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found
    delete:
      description: Delete a customer with *customerName*
      responses:
        200:
          description: Customer deleted 
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found
    put:
      description: Update a customer with *customerName*
      operationId: updateCustomer
      parameters:
        - name: customer
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/newCustomer'
      responses:
        200:
          description: Customer updated
          schema:
            $ref: '#/definitions/customer'
        404:
          description: Customer not found 
          
  /salesmen:
    get:
      description: Gets salesmen
      parameters:
        - name: _sort
          in: query
          required: false
          type: string
        - name: _order
          in: query
          required: false
          type: string
      responses:
        200:
          description: Salesmen succesfully retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/salesman'
    post:
      description: Create a new salesman
      operationId: addSalesman
      parameters:
        - name: salesman
          in: body
          required: true
          description: Salesman to add to the eshop
          schema:
            $ref: '#/definitions/newSalesman'
      responses:
        201:
          description: Salesman created 

  /salesmen/{salesmanName}:
    parameters:
      - name: salesmanName
        in: path
        required: true
        type: string
    get:
      description: Get a salesman with *salesmanName*
      responses:
        200:
          description: Salesman succesfully retrieved
          schema:
            $ref: '#/definitions/salesman'
        404:
          description: Salesman not found
    delete:
      description: Delete a salesman with *salesmanName*
      responses:
        200:
          description: Salesman deleted 
          schema:
            $ref: '#/definitions/salesman'
        404:
          description: Salesman not found
    put:
      description: Update a salesman with *salesmanName*
      operationId: updateSalesman
      parameters:
        - name: salesmanName
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/salesman'
      responses:
        200:
          description: Salesman updated
          schema:
            $ref: '#/definitions/salesman'
        404:
          description: Salesman not found 
          
  /painting:
    post:
      description: Add a new painting to the e-shop
      operationId: addPainting
      parameters:
        - in: body
          name: body
          description: Painting that needs to be added to the e-shop
          required: false
          schema:
            $ref: "#/definitions/painting"
      responses:
        "405":
          description: Invalid input
    get:
      description: View all the paintings
      responses:
        200:
          description: succesfull operation
          schema:
            $ref: "#/definitions/painting"
          
  /painting/findByCategory:
    get:
      description: Finds Paintings by Category
      operationId: findPaintBycategory
      parameters:
        - in: query
          name: category
          description: Category values that need to be considered for filter
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/painting"
        "404":
          description: Invalid Category value
          
  /painting/findByPrice:
    get:
      description: Finds Paintings by Price 
      operationId: findPaintByPrice
      parameters:
        - in: query
          name: price
          description: Price values that need to be considered for filter
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/painting"
        "404":
          description: There are no paintings with that price
          
  /painting/findByTittle:
    get:
      description: Finds Paintings by the Title 
      operationId: findPaintByTitle
      parameters:
        - in: query
          name: title
          description: Title values that need to be considered for filter
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/painting"
        "404":
          description: The title not found
          
  /painting/findByArtist:
    get:
      description: Finds Paintings by the Artist
      operationId: findPaintByArtist
      parameters:
        - in: query
          name: Artist
          description: Artist values that need to be considered for filter
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/painting"
        "404":
          description: The Artist not found
  /painting/{paint_id}:
    delete:
      description: deletes a single paint based on the ID supplied
      operationId: deletePaint
      parameters:
        - name: id
          in: path
          description: ID of paint to delete
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: paint deleted
          schema:
            type: array
            items:
              $ref: "#/definitions/painting"
        "404":
         description: The Artist not found
         
  /Order:
    get:
      description: Find order
      parameters:
        - in: path
          name: orderId
          description: ID of paint that needs to get
          required: true
          type: string
      responses:
        "404":
          description: Order not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid ID supplied
    post:
      description: create an order 
      parameters:
        - in: path
          name: orderId
          description: ID of paint that need to order
          required: true
          type: string
      responses:
        "404":
          description: Order not create
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid ID supplied
          
  /Order/{order_id}:    
    get:
      description: Find purchase order by ID
      parameters:
        - in: path
          name: orderId
          description: ID of paint that needs to get
          required: true
          type: string
      responses:
        "404":
          description: Order not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid ID supplied
    delete:
      description: Delete purchase order by ID
      parameters:
        - in: path
          name: orderId
          description: ID of the order that needs to be deleted
          required: true
          type: string
      responses:
        "404":
          description: Order not found
        "400":
          description: Invalid ID supplied  
    put:
      description: Update an order 
      parameters:
        - in: path
          name: orderId
          description: ID of the order that needs to be upadate
          required: true
          type: string
      responses:
        "404":
          description: Order not found
        "400":
          description: Invalid ID supplied  

  /cart:
    post:
      description: Create a new Cart
      operationId: addCart
      parameters:
        - name: cartId
          in: body
          required: true
          description: Create cart to shop items
          schema:
            $ref: '#/definitions/cart'
      responses:
        201:
          description: Cart created

  /cart/{cartId}:
    parameters:
      - name: cartId
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a cart with *cartId*
      responses:
        200:
          description: Customer succesfully retrieved
          schema:
            $ref: '#/definitions/cart'
        404:
          description: Cart not found
    delete:
      description: Delete a cart with *cartId*
      responses:
        200:
          description: Cart deleted 
          schema:
            $ref: '#/definitions/cart'
        404:
          description: Cart not found
    put:
      description: Update a cart with *cartId*
      operationId: updateCart
      parameters:
        - name: cartId
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/cart'
      responses:
        200:
          description: Cart updated
          schema:
            $ref: '#/definitions/cart'
        404:
          description: Cart not found  

  /reviews:
    post:
      description: Create a new review
      operationId: addReview
      parameters:
        - name: reviewId
          in: body
          required: true
          description: Create a review
          schema:
            $ref: '#/definitions/review'
      responses:
        201:
          description: Review created

  /reviews/{reviewId}:
    parameters:
      - name: reviewId
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a review with *reviewId*
      responses:
        200:
          description: Review succesfully retrieved
          schema:
            $ref: '#/definitions/review'
        404:
          description: Review not found
    delete:
      description: Delete a review with *reviewId*
      responses:
        200:
          description: Review deleted 
          schema:
            $ref: '#/definitions/review'
        404:
          description: Review not found
    put:
      description: Update a review with *reviewId*
      operationId: updateReview
      parameters:
        - name: reviewId
          in: body
          required: true
          description: Updates
          schema:
            $ref: '#/definitions/review'
      responses:
        200:
          description: Review updated
          schema:
            $ref: '#/definitions/review'
        404:
          description: Review not found  

  /reviews/{productId}:
    parameters:
      - name: productId
        in: path
        required: true
        type: integer
        format: int64
    get:
      description: Get a review with *productId*
      responses:
        200:
          description: Review succesfully retrieved
          schema:
            $ref: '#/definitions/review'
        404:
          description: Review not found

          
  